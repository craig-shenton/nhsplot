---
title: "Reference file for NHSplots development"
subtitle: "Standard Visualisations in Q-Markdown"
author: "NHSE-R"
date: "`r Sys.Date()`"
format:
  html:
    mainfont: "Helvetica Neue"
    # Table of Contents options
    toc: true
    toc-depth: 2
    toc-location: left
    toc-title: Contents
    number-sections: true
    number-depth: 3
    # Render options
    theme: cosmo
    anchor-sections: true
    html-math-method: katex
    # Code options
    code-tools:
      source: false
      toggle: false
      caption: none
    code-fold: true
    code-summary: "Show code"
    embed-resources: true
    standalone: true
    # URL options
    link-external-icon: true
    link-external-newwindow: true
    # References
    citations-hover: true
    footnotes-hover: true
    bibliography: references/library.bib
---

# Visualisations

```r
#load packages
source("R/nhs_style.R")
library(ggrepel)
library(tidyverse)
library(dplyr)
library(gapminder)
library(lemon) # for axis options
library(formattable)
```

```{r load library}
#| include: False

#load packages
source("../R/nhs_style.R")
library(ggrepel)
library(tidyverse)
library(dplyr)
library(gapminder)
library(lemon)
library(formattable)

# custom colours
customGreen0 = "#DeF7E9"
customGreen = "#71CA97"
customRed = "#ff7f7f"
```

## Bar Charts

Reference (see @fig-barchart).

```{r fig-barchart}
#| label: fig-barchart
#| fig-cap: Life Expectancy in Africa, 2007. Data source [@gapminder]
#| warning: false

#Prepare data
bar_df <- gapminder %>%
  filter(year == 2007 & continent == "Africa") %>%
  arrange(desc(lifeExp)) %>%
  head(5)

#Make plot
ggplot(bar_df, aes(x = reorder(country, desc(lifeExp)), y = lifeExp, label = round(lifeExp, digits = 0))) +
  geom_col(fill= nhs_palette("nhs_blues")) +
  geom_label(nudge_y = -5, size = 5) +
  # theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
  geom_hline(yintercept = 0, size = 1, colour="#333333") +
  nhs_style() +
  labs(title="Bar Chart Title",
       subtitle = "Bar Chart Sub-Title",
       x = "Country",
       y = "Life Expectancy (Years)"
       )
```

### Bar chart with highligted value

```{r fig-barchart-highlight}
#| label: fig-barchart-highlight
#| fig-cap: Life Expectancy in Africa, 2007. Data source [@gapminder]
#| warning: false

#Prepare data
bar_df <- gapminder %>%
  filter(year == 2007 & continent == "Africa") %>%
  arrange(desc(lifeExp)) %>%
  head(5)

# Find max life expectancy
maxLife <- bar_df[which.max(bar_df$lifeExp), ]

#Make plot
ggplot(bar_df, aes(x = reorder(country, desc(lifeExp)), y = lifeExp)) +
  geom_bar(stat="identity", 
           position="identity", 
           fill="#005EB8") +
  geom_bar(stat="identity", position="identity", fill=ifelse(bar_df$country == maxLife$country, "#005EB8", "#dddddd")) +
  geom_hline(yintercept = 0, size = 1, colour="#333333") +
  nhs_style() +
  labs(subtitle = paste(
            "Life expectancy in",
            maxLife$country,
            "is",
            format(round(maxLife$lifeExp, 0), nsmall = 0),
            "Years"
            ), 
            x = "Country",
            y = "Life Expectancy (Years)"
       )
```

### Horizontal Bar Chart

```{r fig-barchart-horizontal}
#| label: fig-barchart-horizontal
#| fig-cap: Life Expectancy in Africa, 2007. Data source [@gapminder]
#| warning: false

#Prepare data
bar_df <- gapminder %>%
  filter(year == 2007 & continent == "Africa") %>%
  arrange(desc(lifeExp)) %>%
  head(5)

#Make plot
ggplot(bar_df, aes(x = reorder(country, lifeExp), y = lifeExp)) +
  geom_bar(stat="identity", 
           position="identity", 
           fill="#005EB8") +
  # theme(axis.text.x = element_text(angle=45, vjust=1, hjust=1)) +
  geom_hline(yintercept = 0, size = 1, colour="#333333") +
  nhs_style() +
  coord_flip() +
  theme(panel.grid.major.x = element_line(color="#cbcbcb"), 
        panel.grid.major.y=element_blank()) +
  labs(x = "Country",
    y = "Life Expectancy (Years)"
    )
```

### Pyramid Chart

```{r fig-pyramid-chart}
#| label: fig-pyramid-chart
#| fig-cap: Age / sex distribution.
#| warning: false

set.seed(100)
a <- seq(from = 0, to = 90, by = 10)
d <- data.frame(age = paste(a, a + 10, sep = "-"),
                sex = rep(x = c("Female", "Male"), each = 10),
                pop = sample(x = 1:100, size = 20)+100)

ggplot(data = d, 
       mapping = aes(x = ifelse(test = sex == "Male", yes = -pop, no = pop), 
                     y = age, fill = sex)) +
  geom_col() +
  scale_x_symmetric(labels = abs) +
  labs(x = "Population Count",
       y = "Age Group (Years)") +
  nhs_style() +
  scale_fill_discrete(breaks=c("Male","Female")) # sort legend lable order
```

## Line Charts

```{r fig-linechart}
#| label: fig-linechart
#| fig-cap: Life expectancy in Malawi 1952-2007. Data source [@gapminder]
#| warning: false

#Prepare data
line_df <- gapminder %>%
  filter(country %in% c("Algeria","Libya", "Mauritius", "Reunion", "Tunisia"))

latest_values <- line_df %>%
  top_n(1, year) 

#Make plot
ggplot(line_df, aes(x = year, y = lifeExp, xend = 2010, yend = 100, colour = country)) +
  geom_line(size = 1) +
  scale_color_manual(values=nhs_palette("nhs_blues")) +
  geom_hline(yintercept = 0, size = 1, colour="#333333") +
  nhs_style() +
  theme(legend.position="none", 
        plot.margin = margin(0,2,0,0, "cm")) +
  labs(title="Line Chart Title",
       subtitle = "Line Chart Sub-Title",
       x = "Year",
       y = "Life Expectancy (Years)"
      ) +
  coord_cartesian(clip = "off") +
  geom_label_repel(
    aes(label = paste(
            country,
            ": ",
            round(lifeExp, digits = 0),
            sep = ""
            )),
    data = latest_values, 
    size = 4,
    nudge_x = 0, direction = "y", hjust = "left",
    xlim = c(-Inf, Inf),
    ylim = c(-Inf, Inf),
    fill = "white",
    min.segment.length = Inf
    )
```

### Line chart with latest value KPI

```{r fig-linechart-kpi}
#| label: fig-linechart-kpi
#| fig-cap: Life expectancy in Malawi 1952-2007. Data source [@gapminder]
#| warning: false

#Prepare data
line_df <- gapminder %>%
  filter(country == "Malawi")

# get latest metric value for KPI
latestDate <- max(line_df$year)
latestDate_value <- line_df %>% 
      filter(year == latestDate)

#Make plot
ggplot(line_df, aes(x = year, y = lifeExp)) +
  geom_line(colour = "#005EB8", size = 1) +
  geom_hline(yintercept = 0, size = 1, colour="#333333") +
  nhs_style() +
  ylim(c(0, max(line_df$lifeExp)+10)) + # add space above line
  labs(subtitle = paste(
            "Life expectancy in Malawi is",
            format(round(latestDate_value$lifeExp, 0), nsmall = 0),
            "as of",
            format(latestDate, format="%Y")
       )
  )
```

**todo:** 

1. Function to create KPI sub-titles

### Line chart with target line and lable

```{r fig-linechart-target}
#| label: fig-linechart-target
#| fig-cap: Life expectancy in Malawi 1952-2007. Data source [@gapminder]
#| warning: false

# prepare data
line_df <- gapminder %>%
  filter(country == "Malawi")

# get latest metric value for KPI
latestDate <- max(line_df$year)
latestDate_value <- line_df %>% 
      filter(year == latestDate)

# make plot
ggplot(line_df, aes(x = year, y = lifeExp)) +
  geom_line(colour = "#005EB8", size = 1) +
  geom_hline(yintercept = 0, size = 1, colour="#333333") +
  geom_hline(yintercept=45,  # taget line options
      linetype='dashed',
      size = 1.5,
      colour='#425563') +
  geom_label(                # taget lable options
      aes(
            x = 1952,
            y = 45, label = "Target (45 Years)"
      ),
      hjust = 0.15, 
      vjust = -.3, 
      colour = "#425563", 
      fill = "white", 
      label.size = NA, 
      family="Helvetica", 
      size = 6) +
  nhs_style() +
  ylim(c(0, max(line_df$lifeExp)+10)) # add space above line
```

**todo:** 

1. Function to add target as variable with adjustments

## Deviation Plot
Example graph for displaying deviations from a common reference point or baseline.

```{r load deviation}
#| label: fig-deviation
#| fig-cap: Deviation
#| warning: false

#make data
df <- data.frame(trt=rep(c("Dose 1", "Dose 2", "Dose 3"), each=4),
                 visit=rep(c(1, 2, 3, 4),3),
                 response=c(0, 0.7, 0.8, 0.6, 
                            0, 0.5, 0.6, 0.2,
                            0, -0.2, -0.6, -0.9 ))

ggplot(df, aes(x=visit, y=response, group=trt, colour=trt)) + 
  geom_hline(yintercept = 0, size = 1, colour="#333333") + 
  geom_point(size=3) +
  geom_line(size=1) +
  scale_y_continuous(limits = c(-1, 1), breaks = c(-1,-0.5,0,0.5,1)) +
  nhs_style() +
  labs(y = "Response",
       x = "Visits"
       )
```

## Correlation Plot
For displaying the relationship between them two or more variables.

```{r load correlation}
#| label: fig-correlation
#| fig-cap: Correlation
#| warning: false

set.seed(1984)
# Create some data
df <- data.frame(cause=c(runif(40,1,10))   )
df$effect <- df$cause*(rnorm(40,2,0.5)) + rnorm(40,0,1)

ggplot(df, aes(x=cause, y=effect)) + 
  geom_point(size=4.5, shape = 16,position="jitter") +
  geom_smooth(method = "lm") +        
  scale_y_continuous(expand=c(0,0.5)) +
  scale_x_continuous(expand=c(0,0.5)) +
  nhs_style() +
  labs(y = "Effect",
       x = "Cause"
       )
```

## Scatter Plots

```{r fig-scatterplot}
#| label: fig-scatterplot
#| fig-cap: Population vs land area in mid-western USA.
#| warning: false

# prepare data
data("midwest", package = "ggplot2")
options(scipen=999)  # turn-off scientific notation like 1e+48

# make plot
ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  xlim(c(0, 0.1)) + 
  ylim(c(0, 500000)) + 
  labs(y="Population", x="Area") +
  nhs_style()
```

## Box Plot

```{r fig-box-plot}
#| label: fig-box-plot
#| fig-cap: City Mileage grouped by class of vehicle, USA.
#| warning: false

# Plot
g <- ggplot(mpg, aes(class, cty))
g + geom_boxplot(varwidth=T, fill="#005EB8") + 
    labs(
         x="Class of Vehicle",
         y="City Mileage") +
    nhs_style()
```

## Tables

```{r fig-table}
#| label: tbl-table
#| tbl-cap: Life expectancy in Africa 1952-2007.

# data
line_df <- gapminder %>%
  filter(country %in% c("Algeria","Libya", "Mauritius", "Reunion", "Tunisia"))

latest_values <- line_df %>%
  top_n(1, year) %>%  
  mutate_if(is.numeric, round, digits = 0) %>%
  arrange(desc(lifeExp))

colnames(latest_values) <- c("Country", "Continent", "Year", "Life Expectancy", "Poulation", "GDP Per Capita")

improvement_formatter <- formatter("span", 
    style = x ~ style(font.weight = "bold", 
    color = ifelse(x > 8000, customGreen, ifelse(x < 8000, customRed, "black"))), 
    x ~ icontext(ifelse(x>8000, "thumbs-up", "arrow-down"), x)
    )

# Table
formattable(latest_values,
            align =c("l","c","c","r","r","r"), 
            list(`Country` = formatter(
              "span", style = ~ style(color = "grey",font.weight = "bold")), 
            `Life Expectancy` = color_tile(customGreen0, customGreen),
            `GDP Per Capita` = improvement_formatter
            ))
```
Data source [@gapminder]

# References

::: {#refs}
:::
